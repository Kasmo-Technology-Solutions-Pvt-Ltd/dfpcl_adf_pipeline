{
	"name": "Final_Testing",
	"properties": {
		"activities": [
			{
				"name": "GETTABLE",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "TIMESTAMP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ExcelSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						}
					},
					"dataset": {
						"referenceName": "Sap_Config_File_Details",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach",
				"description": "Full and Incremental load",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GETTABLE",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GETTABLE').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Full Load",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "LS_AZURE_BLOB",
										"type": "LinkedServiceReference"
									}
								},
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "Sap_Sql_Sever_Local",
									"type": "DatasetReference",
									"parameters": {
										"Schema": {
											"value": "@item().Schema",
											"type": "Expression"
										},
										"table_name": {
											"value": "@item().table_name",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Sap_Sink_Blob_Storage",
									"type": "DatasetReference",
									"parameters": {
										"FILENAME": {
											"value": "@concat(item().table_name,'_',variables('DateTImeStamp'),'.parquet')",
											"type": "Expression"
										},
										"FolderName": {
											"value": "@concat(item().data_base,'/',item().Schema,'/',item().table_name,'/')",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Set variable1",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Full Load",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "folder",
								"value": {
									"value": "@concat(item().data_base,'/',item().Schema,'/',item().table_name,'/')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "HashKeyGenarator",
							"type": "ExecuteDataFlow",
							"dependsOn": [
								{
									"activity": "Set variable1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "Sap_Hashkey_Genarator",
									"type": "DataFlowReference",
									"parameters": {
										"filenamedemo": {
											"value": "'@{variables('filetest')}'",
											"type": "Expression"
										}
									},
									"datasetParameters": {
										"BlobSource": {
											"sapfile1": {
												"value": "@variables('filetest')",
												"type": "Expression"
											}
										},
										"FinalParquetGen": {
											"file": {
												"value": "@variables('filetest')",
												"type": "Expression"
											}
										}
									}
								},
								"compute": {
									"coreCount": 16,
									"computeType": "General"
								},
								"traceLevel": "Fine"
							}
						},
						{
							"name": "Script1",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "HashKeyGenarator",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "sapfinal_integration",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "CALL DP_FERTILIZERS.DP_FERTI_SCH.data_load_sf(\n    '@{item().sf_db}',\n    '@{item().sf_sch}',\n    '@{item().sf_ext_sch}',\n    '@{item().sf_tbl}',\n    '@{item().pk_cols}',\n    '@{item().insrt_time_col}',\n    '@{item().updt_time_col}',\n    '2024-05-18 06:56:36.435 -0700',\n    '@{item().data_base}',\n    '@{item().Schema}',\n    '@{item().table_name}',\n    '2024-05-18 06:56:36.435 -0700'\n);",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "TIMESTAMP",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "DateTImeStamp",
					"value": {
						"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss:fff')",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"DateTImeStamp": {
				"type": "String"
			},
			"Variable_Is_Incremental_Load": {
				"type": "Boolean"
			},
			"MaxUpdateTime": {
				"type": "String"
			},
			"Error": {
				"type": "String"
			},
			"Get_Error_Message": {
				"type": "String"
			},
			"filenmae": {
				"type": "String"
			},
			"filetest": {
				"type": "String"
			},
			"folder": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Insurance Analytics"
		},
		"annotations": [],
		"lastPublishTime": "2024-05-20T12:40:28Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}